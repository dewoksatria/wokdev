// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  name          String?
  role          String    @default("STAFF")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Portfolio relations
  experiences   Experience[]
  projects      Project[]
  skills        Skill[]
  socials       Social[]
  profile       Profile?

  @@index([email])
}

model Profile {
  id          String   @id @default(cuid())
  bio         String?  // Removed @db.Text
  headline    String?
  location    String?
  website     String?
  avatar      String?
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Experience {
  id          String   @id @default(cuid())
  title       String
  company     String
  location    String?
  startDate   DateTime
  endDate     DateTime?
  current     Boolean  @default(false)
  description String?  // Removed @db.Text
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String?  // Removed @db.Text
  image       String?
  link        String?
  githubUrl   String?
  startDate   DateTime
  endDate     DateTime?
  technologies String   // Changed from String[] to String - will store as JSON string
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Skill {
  id          String   @id @default(cuid())
  name        String
  level       Int      // 1-5
  category    String   // e.g., "Frontend", "Backend", "DevOps"
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Social {
  id          String   @id @default(cuid())
  platform    String   // e.g., "LinkedIn", "GitHub", "Twitter"
  url         String
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}